"use strict";(self.webpackChunkdocusaurus_test=self.webpackChunkdocusaurus_test||[]).push([[626],{3905:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>m});var l=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,l)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,l,n=function(e,t){if(null==e)return{};var o,l,n={},a=Object.keys(e);for(l=0;l<a.length;l++)o=a[l],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)o=a[l],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=l.createContext({}),c=function(e){var t=l.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},h=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),u=c(o),d=n,m=u["".concat(s,".").concat(d)]||u[d]||p[d]||a;return o?l.createElement(m,i(i({ref:t},h),{},{components:o})):l.createElement(m,i({ref:t},h))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:n,i[1]=r;for(var c=2;c<a;c++)i[c]=o[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,o)}d.displayName="MDXCreateElement"},4959:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var l=o(7462),n=(o(7294),o(3905));const a={},i="Hello world",r={unversionedId:"hpl2/tutorial/first-level",id:"hpl2/tutorial/first-level",title:"Hello world",description:"Now that we have a basic skeleton of a custom story folder, we can begin creating a simple map. Once this is done, we can finally test our custom story to make sure everything is working up to this point.",source:"@site/docs/hpl2/tutorial/3.first-level.md",sourceDirName:"hpl2/tutorial",slug:"/hpl2/tutorial/first-level",permalink:"/hpl/docs/hpl2/tutorial/first-level",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/hpl/docs/hpl2/tutorial/getting-started"},next:{title:"Moment of truth",permalink:"/hpl/docs/hpl2/tutorial/moment-of-truth"}},s={},c=[{value:"The level editor",id:"the-level-editor",level:2},{value:"Making a level",id:"making-a-level",level:2},{value:"Something to stand on",id:"something-to-stand-on",level:3},{value:"Let there be light",id:"let-there-be-light",level:3},{value:"Our spawn point",id:"our-spawn-point",level:3},{value:"Don&#39;t forget to save",id:"dont-forget-to-save",level:3}],h={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,l.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"hello-world"},"Hello world"),(0,n.kt)("p",null,"Now that we have a basic skeleton of a custom story folder, we can begin creating a simple map. Once this is done, we can finally test our custom story to make sure everything is working up to this point."),(0,n.kt)("p",null,"Go (back) to the main TDD folder. If you installed the development tools already, find ",(0,n.kt)("inlineCode",{parentName:"p"},"LevelEditor.exe")," and run it."),(0,n.kt)("h2",{id:"the-level-editor"},"The level editor"),(0,n.kt)("p",null,"When you first start the level editor, it will have an empty map loaded, ready to place objects into. Let's have a quick overview of what is what."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Level Editor",src:o(9036).Z,width:"1024",height:"768"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The top section contains the menu bar, with basic operations such as creating, saving, and opening levels. It also has some properties and settings for the editor itself."),(0,n.kt)("li",{parentName:"ul"},"The left section contains a list of different tools. Most of these tools relate to placing down some type of object, such as lights, entities, ambient sounds, etc."),(0,n.kt)("li",{parentName:"ul"},'The right section has different options based on the context. For example, if you choose the "entity" tool, it will have a list of entities to pick from. If you select a placed object with the "select" tool, it will display properties for the selected object.'),(0,n.kt)("li",{parentName:"ul"},"The bottom section has a few options for editor controls and visibility."),(0,n.kt)("li",{parentName:"ul"},"The middle section is the viewport, which is where you will see the actual level. By default it is split into 4 smaller viewports, 3 of which are 2D and the last being a 3D perspective. You can maximize one of the viewports by hovering the mouse on it and pressing ",(0,n.kt)("kbd",null,"Space"),".")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"To control the camera inside the level editor, hold down the ",(0,n.kt)("kbd",null,"ALT")," button on your keyboard. While holding it down:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Left-click and drag with the mouse to rotate the camera around the blue pivot point in the middle."),(0,n.kt)("li",{parentName:"ul"},"Right-click and drag to adjust the zoom level (you can also just use the mouse scroll wheel)."),(0,n.kt)("li",{parentName:"ul"},"Middle-click (wheel down) to pan the camera and move the blue pivot point around on the grid."))),(0,n.kt)("p",null,"There are many things you can do to construct your levels, but for now we will go ahead with the most basic features you will need to make a level functional."),(0,n.kt)("h2",{id:"making-a-level"},"Making a level"),(0,n.kt)("p",null,"To make a level technically playable, we need a few things:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A floor so we don't fall into the endless void."),(0,n.kt)("li",{parentName:"ol"},"A light so we can actually see something around us."),(0,n.kt)("li",{parentName:"ol"},"A PlayerStart area, which tells the game where to place us when we load in.")),(0,n.kt)("h3",{id:"something-to-stand-on"},"Something to stand on"),(0,n.kt)("p",null,'Let\'s start with number 1. Choose the "Primitives" tool on the left side (icon of a green cylinder and blue cone). This tool can be used to place down "planes" which are primitive models consisting of only a single, 2D, flat face. Before we can place one down, we must select a material for this plane. A material is a collection of properties applied to a texture file, so the material will primarily decide how the plane looks.'),(0,n.kt)("p",null,"Click the ",(0,n.kt)("kbd",null,"...")," button on the right section to bring up the built-in file browser. By default it starts in the main TDD folder. Most materials are found inside ",(0,n.kt)("inlineCode",{parentName:"p"},"static_objects"),', so let\'s go there. Then we can pick one of the asset collections, such as "castlebase" or "mansionbase". Each of these two have a "floors" folder where materials commonly used for flooring can be found. Pick any texture you like.'),(0,n.kt)("p",null,'With a material now loaded, click and drag across the viewport. The "Top" or "Perspective" viewports are best for floors. When you release the mouse button, a plane will be created in the level.'),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},'If you need to move or resize the plane you created, use the "select" tool (shortcut "1") and click the plane. You will see in the corner red, green and blue arrows. These are called the translation controls (shortcut "Q") and can be clicked and dragged to move the object. Notice the 3 buttons in the top-right corner of the right panel. These buttons allow you to switch between translation, rotation (shortcut "W") and scale (shortcut "E") controls. The rotation controls will look like colored circles instead of arrows, and the scale controls will look like arrows except with cube heads.')),(0,n.kt)("h3",{id:"let-there-be-light"},"Let there be light"),(0,n.kt)("p",null,'Next up, add a light. Select the "Lights" tool (icon of a yellow light bulb) and click somewhere to place down a light or two. You can use the "Select" tool afterward to move and resize lights. We will get back to lights in a later part.'),(0,n.kt)("h3",{id:"our-spawn-point"},"Our spawn point"),(0,n.kt)("p",null,'Finally we will place down the PlayerStart area. Areas are invisible boxes that are used for interactive functionality. Go to the "Area" tool (icon of a dotted box frame). In the right panel, there\'s a dropdown menu for the type of area you want to use. The very last option (you have to scroll) is called PlayerStartArea. Select it, and click somewhere on your plane to place it down.'),(0,n.kt)("h3",{id:"dont-forget-to-save"},"Don't forget to save"),(0,n.kt)("p",null,"All that remains now is to go to File > Save, and save the map inside your custom story's ",(0,n.kt)("inlineCode",{parentName:"p"},"maps")," folder, matching the name you put in the config file. For example ",(0,n.kt)("inlineCode",{parentName:"p"},"custom_stories/My Story/maps/first_level.map"),"."),(0,n.kt)("p",null,"Great, we've come this far so now let's see if everything works so far."))}p.isMDXComponent=!0},9036:(e,t,o)=>{o.d(t,{Z:()=>l});const l=o.p+"assets/images/level-editor-411eb7701cea55b877a0dc239d15fc45.png"}}]);